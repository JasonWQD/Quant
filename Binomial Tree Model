import pandas as pd
import numpy as np 
import matplotlib.pyplot as plt
import scipy as sp
import datetime
import pandas_datareader.data as web
import datetime
import fix_yahoo_finance as yf
import math
import statsmodels.api as sm
from scipy import stats
from scipy.stats import norm
yf.pdr_override

##############################################################
### binomial()
def binomial(S, steps0):
    '''
    S: spot price
    steps0: steps of binomial trees
    '''
    results=[]
    std=np.std(mr)
    u=np.exp(std)
    d=1/u
    k=4300
    price_tree=np.zeros([steps0+1,steps0+1])
    for i in range(len(price_tree)):
        for j in range(i+1):
            price_tree[i,j]=round(S*(d**j)*(u**(i-j)),0)
    return price_tree


##############################################################
###vanilla_option(S, K, t, r, sigma)
def vanilla_option(S, K, T, r, std):
    """
    S: spot price
    K: strike price
    T: time to maturity
    r: risk-free interest rate
    std: standard deviation of price of underlying asset
    """
    R = np.log(1+r/T)
    d1 = (np.log(S/K) + (R + 0.5*std**2)*T)/(std*np.sqrt(T))
    d2 = (np.log(S/K) + (R - 0.5*std**2)*T)/(std * np.sqrt(T))
    call_price = (S*norm.cdf(d1, 0.0, 1.0) - K*np.exp(-R*T)*norm.cdf(d2, 0.0, 1.0))
    put_price = (K*np.exp(-R*T)*norm.cdf(-d2, 0.0, 1.0) - S*norm.cdf(-d1, 0.0, 1.0))
    return call_price, put_price

##############################################################
###binarytree_europcall(S,K,r,sigma,t,steps)
def binarytree_europcall(S,K,r,sigma,t,steps):
    '''
    S: spot price；
    K: strike price;
    r: risk-free interest rate；
    sigma: standard deviation of price of underlying asset；
    t: time to maturity
    steps: the amount of steps within t
    '''
    u=np.exp(sigma*np.sqrt(t/steps))   
    d=1/u     
    P=(np.exp(r*t/steps)-d)/(u-d)
    prices=np.zeros(steps+1)      
    c_values=np.zeros(steps+1)     
    prices[0]=S*d**steps           
    c_values[0]=np.maximum(prices[0]-K,0)
    for i in range(1,steps+1):
        prices[i]=prices[i-1]*(u**2)   
        c_values[i]=np.maximum(prices[i]-K,0)  
    for j in range(steps,0,-1):       
        for i in range(0,j):
            c_values[i]=(P*c_values[i+1]+(1-P)*c_values[i])*np.exp(-r*t/steps)
    return c_values[0],P


##############################################################
###binarytree_europput(S,K,r,sigma,t,steps)
def binarytree_europput(S,K,r,sigma,t,steps):
    '''
    S: spot price；
    K: strike price;
    r: risk-free interest rate；
    sigma: standard deviation of price of underlying asset；
    t: time to maturity
    steps: the amount of steps within t
    '''
    u=np.exp(sigma*np.sqrt(t/steps))   
    d=1/u     
    P=(np.exp(r*t/steps)-d)/(u-d)
    prices=np.zeros(steps+1)      
    c_values=np.zeros(steps+1)    
    prices[0]=S*d**steps           
    c_values[0]=np.maximum(K-prices[0],0)
    for i in range(1,steps+1):
        prices[i]=prices[i-1]*(u**2)  
        c_values[i]=np.maximum(K-prices[i],0)  
    for j in range(steps,0,-1):       
        for i in range(0,j):
            c_values[i]=(P*c_values[i+1]+(1-P)*c_values[i])*np.exp(-r*t/steps)
    return c_values[0]

##############################################################
###binarytree_americacall(S,K,r,sigma,t,steps)
def binarytree_americacall(S,K,r,sigma,t,steps):
    '''
    S: spot price；
    K: strike price;
    r: risk-free interest rate；
    sigma: standard deviation of price of underlying asset；
    t: time to maturity
    steps: the amount of steps within t
    '''
    u=np.exp(sigma*np.sqrt(t/steps))   
    d=1/u     
    P=(np.exp(r*t/steps)-d)/(u-d)
    prices=np.zeros(steps+1)       
    c_values=np.zeros(steps+1)     
    prices[0]=S*d**steps           
    c_values[0]=np.maximum(prices[0]-K,0)
    for i in range(1,steps+1):
        prices[i]=prices[i-1]*(u**2)   
        c_values[i]=np.maximum(prices[i]-K,0)  
    for j in range(steps,0,-1):       
        for i in range(0,j):
            c_values[i]=np.maximum((P*c_values[i+1]+(1-P)*c_values[i])*np.exp(-r*t/steps),prices[i]-K)
    return c_values[0]

##############################################################
###binarytree_americaput(S,K,r,sigma,t,steps)
def binarytree_americaput(S,K,r,sigma,t,steps):
    '''
    S: spot price；
    K: strike price;
    r: risk-free interest rate；
    sigma: standard deviation of price of underlying asset；
    t: time to maturity
    steps: the amount of steps within t
    '''
    u=np.exp(sigma*np.sqrt(t/steps))
    d=1/u
    P=(np.exp(r*t/steps)-d)/(u-d)
    prices=np.zeros(steps+1)
    c_values=np.zeros(steps+1)
    prices[0]=S*d**steps
    c_values[0]=np.maximum(K-prices[0],0)
    for i in range(1,steps+1):
        prices[i]=prices[i-1]*(u**2)
        c_values[i]=np.maximum(K-prices[i],0)
    for j in range(steps,0,-1):
        for i in range(0,j):
            prices[i]=prices[i+1]*d
            c_values[i]=np.maximum((P*c_values[i+1]+(1-P)*c_values[i])*np.exp(-r*t/steps),K-prices[i])
            #if (P*c_values[i+1]+(1-P)*c_values[i])*np.exp(-r*t/steps) < K-prices[i]:
                #print('put option should be earily exercised at time', j-1)
    return c_values[0]

###########################################################
### main
def main():
    print('2.a')
    S=web.get_data_yahoo('^GSPC','2021-08-31').reset_index()['Close'][0]
    steps0=3
    print(binomial(S, steps0))
    print('-'*40)
    
    print('2.b')
    K = 4300
    t = 1
    r = np.log(1+0.002)
    steps=3
    sigma = np.std(mr)*np.sqrt(steps)
    print('European call option value=',binarytree_europcall(S,K,r,sigma,t,steps)[0])
    print('Risk Neutral Prob of upward=',binarytree_europcall(S,K,r,sigma,t,steps)[1])
    print('-'*40)
    
    print('2.c')
    std = np.std(mr)
    steps=3
    T=3
    (call_price, put_price)=vanilla_option(S, K, T, r, std)
    print('European call option price of BS model=',call_price)
    print('European put option price of BS model=',put_price)
    print('The reason for the difference is binomial tree has not enough nodes')
    print('-'*40)
    
    print('2.d')
    europcall_values=[]
    Steps=[3, 10, 100, 1000, 10000]
    for i in Steps:
        europcall_values.append(binarytree_europcall(S,K,r,sigma,t,steps=i)[0])
    plt.plot(Steps, europcall_values, label='Binomial Tree')
    plt.hlines(call_price,Steps[-1],0.5,colors='r',linestyles='dashed',label='Black Scholes')
    plt.title('Binomial Tree',fontsize=20)
    plt.ylabel('European call option value',fontsize=15) 
    plt.xlabel('Steps',fontsize=15)
    plt.legend()
    plt.show()
    print('-'*40)
    
    print('2.e')
    europput_values=[]
    for i in Steps:
        europput_values.append(binarytree_europput(S,K,r,sigma,t,steps=i))
    plt.plot(Steps, europput_values, label='Binomial Tree')
    plt.hlines(put_price,Steps[-1],0.5,colors='r',linestyles='dashed',label='Black Scholes')
    plt.title('Binomial Tree',fontsize=20)
    plt.ylabel('European put option value',fontsize=15) 
    plt.xlabel('Steps',fontsize=15)
    plt.legend()
    plt.show()
    print('-'*20)
    
    print('2.f')
    print('price of American call option=',binarytree_americacall(S,K,r,sigma,t,steps))
    print('price of American put option=',binarytree_americaput(S,K,r,sigma,t,steps))
    print('none of them should be exercised early')

###########################################################
### start main
if __name__ == "__main__":
    main()
