import pandas as pd
import numpy as np 
import matplotlib.pyplot as plt
import scipy as sp
import datetime
import datetime
import math
import statsmodels.api as sm
from scipy import stats
from scipy.stats import norm
from random import gauss
from math import exp, sqrt


# # Monte Carlo simulation
###########################################################
### Return
def Return(index):
    '''
    Purpose:      Get the log return of each date
    Input:        Name of S&P500 index csv file
    Output:       The DataFrame of Date and log returns
    '''
    df=pd.read_csv(index)
    df=df[:-1]
    df=df[18:]
    df['SP500']=[float(i) for i in df['SP500']]
    df.index = range(len(df))
    log_return=[]
    for i in range(1,len(df['DATE'])):
        log_return.append(math.log(df['SP500'][i]/df['SP500'][i-1]))
    LReturn=pd.DataFrame({'Date':df['DATE'][1:],'log_return':log_return})
    return LReturn

###########################################################
### binarytree_europcall
def binarytree_europcall(S,K,r,sigma,t,steps):
    '''
    S: spot price；
    K: strike price;
    r: risk-free interest rate；
    sigma: standard deviation of price of underlying asset；
    t: time to maturity
    steps: the amount of steps within t
    '''
    u = np.exp(sigma*np.sqrt(t/steps))   
    d = 1/u     
    P = (np.exp(r*t/steps)-d)/(u-d)
    prices = np.zeros(steps+1)      
    c_values = np.zeros(steps+1)     
    prices[0] = S*d**steps           
    c_values[0] = np.maximum(prices[0]-K,0)
    for i in range(1,steps+1):
        prices[i] = prices[i-1]*(u**2)   
        c_values[i] = np.maximum(prices[i]-K,0)  
    for j in range(steps,0,-1):       
        for i in range(0,j):
            c_values[i] = (P*c_values[i+1]+(1-P)*c_values[i])*np.exp(-r*t/steps)
    return c_values[0],P, u, d

###########################################################
### vanilla_option
def vanilla_option(S, K, t, r, sigma):
    """
    S: spot price
    K: strike price
    T: time to maturity
    r: risk-free interest rate
    std: standard deviation of price of underlying asset
    """
    d1 = (np.log(S/K) + (r + 0.5*sigma**2)*t)/(sigma * np.sqrt(t))
    d2 = (np.log(S/K) + (r - 0.5*sigma**2)*t)/(sigma * np.sqrt(t))
    call_price = (S*norm.cdf(d1, 0.0, 1.0) - K*np.exp(-r*t)*norm.cdf(d2, 0.0, 1.0))
    put_price = (K*np.exp(-r*t)*norm.cdf(-d2, 0.0, 1.0) - S*norm.cdf(-d1, 0.0, 1.0))
    return call_price

def Euler(N):
    #S = web.get_data_yahoo('^GSPC','2021-08-31').reset_index()['Close'][0]
    R = 0.008/N
    Sigma = (np.std(Return('SP500.csv')['log_return'])*np.sqrt(3))/np.sqrt(N)
    M = [100, 500, 1000, 5000, 10000]
    vCall = []
    for j in M:
        call_option = []
        for n in range(j):
            S = 4522.68017578125
            for i in np.random.normal(0,1,N):
                S = S*(1+R+Sigma*i)
            v = np.maximum(0, S-4500)
            call_option.append(v)
        vCall.append(round(np.mean(call_option)/((1+R)**N),3))
    return vCall, call_option

###########################################################
### calculate_S_T
def calculate_S_T(S, v, r, T):
    return S * exp((r - 0.5 * v ** 2) * T + v * sqrt(T) * gauss(0.0, 1.0))

###########################################################
### option_payoff
def option_payoff(flag, S_T, K):
    if flag == 'call':
        return max(S_T - K, 0.0)
    else:
        return max(K - S_T, 0.0)

###########################################################
### option_price
def option_price(flag, S, r, T, v, K, simulations):
    payoffs = []
    discout = exp(-r * T)
    for i in range(simulations):
        S_T = calculate_S_T(S, v, r, T)
        payoffs.append(
            option_payoff(flag, S_T, K)
        )
    price = discout * sum(payoffs) / float(simulations)
    return price

###########################################################
### main
def main():
    print('1.a')
    sigma = np.std(Return('SP500.csv')['log_return'])*np.sqrt(3)
    S = 4522.68
    K = 4500
    r = np.log(1+0.002)
    t = 1
    steps = 300
    (V, P, u, d)= binarytree_europcall(S, K, r, sigma, t, steps)
    print('Under binomial tree, the European call option price=', V)
    print('Probability of upward=', P)
    print('u=', u)
    print('d=', d)
    
    call_price= vanilla_option(S, K, t, r, sigma)
    print('Under BS model, the European call option price= ', round(call_price,4))
    print('The difference between Binomial Tree model and BS model is 137.5490-137.4660=', round(V-call_price,4),'which can be ignored')
    print('-'*40)
    
    print('1.b')
    N=3
    (vCall, call_option)= Euler(N)
    print('Under Euler Method, the European call option price=', vCall)
    print('-'*40)
    
    print('1.c')
    N=63
    (vCall, call_option)= Euler(N)
    print('The amount of call option price results:', len(call_option))
    print('Under Euler Method, the European call option price=', vCall)
    print('Obviously the result here is completely different from results of 1b and BS model')
    print('-'*40)
    
    print('1.d')
    R = np.log(1+0.008)
    T = 0.25
    v = np.std(Return('SP500.csv')['log_return'])*np.sqrt(12)
    simulations = [100, 500, 1000, 5000, 10000]
    prices=[]
    for i in simulations:
        prices.append(option_price('call', S, R, T, v, K, i))
    prices= pd.DataFrame({'simulations': simulations, 'Prices': prices}).set_index('simulations')
    print(prices)
    print('-'*40)
    
    print('1.e')
    print('Obviously, European call option price over 10000 draws is the closest price to the result of BS model which is 137.466')
    return prices
###########################################################
### start main
if __name__ == "__main__":
    main()


# # Dynamic Hedging

# In[42]:


###########################################################
### calculate_S_T
def calculate_S_T(S, sigma, R, T, factor):
    return S * exp((R - 0.5 * sigma*(1+factor) ** 2) * T + sigma*(1+factor) * sqrt(T) * gauss(0.0, 1.0))

def replication(paths, T, R, factor, calculate_S_T, ):
    PLs= []
    for path in range(paths):
        S= 4500
        K= 4500
        SP=[]
        Delta=[]
        Qty=[]
        Costs=[]
        Interest_cost=[]
        cumulative_cost=[]
        sigma = np.std(Return('SP500.csv')['log_return'])*np.sqrt(12)
        R = np.log(1+R)
        r = np.log(1+0.008)
        for i in range(int(0.25/T)+1):
            if i == 0:
                S= S
            else:
                S= round(calculate_S_T(S, sigma, R, T, factor),3)
            SP.append(S)

            t= 0.25-T*i
            Sigma= sigma*(1+factor)
            d1 = (np.log(S/K) + (r + 0.5*Sigma**2)*t)/(Sigma * np.sqrt(t))
            Nd1= round(norm.cdf(d1, 0.0, 1.0),3)
            Delta.append(Nd1)
            
            if i == 0:
                Quantity= Nd1*1000
                Cost= S*Quantity
                ccost= Cost-125216.2901
                Icost= round(ccost*(np.exp(r*T)-1),3)
            else:
                Quantity= (Nd1-N)*1000
                Cost= round(Quantity*S,3)
                ccost= ccost + Cost + Icost
                Icost= round(ccost*(np.exp(r*T)-1),3)
            Qty.append(Quantity)
            Costs.append(Cost)
            cumulative_cost.append(ccost)
            Interest_cost.append(Icost)
            N= Nd1
        
        a= pd.DataFrame({'Stock Price':SP,
            'Delta':Delta,
            'Qty':Qty,
            'Cost':Costs,
            'cumulative cost':cumulative_cost,
            'Interest_cost':Interest_cost
        })
        call_value= 1000*(max(a['Stock Price'].values[-1]-K, 0))
        PL= a['Qty'].sum() * a['Stock Price'].values[-1] - a['cumulative cost'].values[-1]-call_value
        PLs.append(PL)

    return PLs

###########################################################
### main
def main():
    print('2.a')
    sigma = np.std(Return('SP500.csv')['log_return'])*np.sqrt(3)
    S = 4500
    K = 4500
    r = np.log(1+0.002)
    t = 1
    call_price= vanilla_option(S, K, t, r, sigma)
    print('Under BS model, the amount of money the trader receives= ', round(call_price*1000,4))
    print('-'*40)
    
    print('2.b')
    paths= 5000
    T = 1/52
    R= 0.04
    factor= 0
    PLs= replication(paths, T, R, factor, calculate_S_T)
    #PLs= [b - call_price*1000 for b in PLs]
    print('Standard Deviation of P&L = ', np.std(PLs))
    print('Mean value of P&L = ', np.mean(PLs))
    plt.figure(figsize=(7,5))
    plt.hist(PLs, bins=100)
    plt.axvline(x = np.mean(PLs), color = 'r')
    plt.show()
    print('-'*40)
    
    print('2.c')
    T = 1/12
    R= 0.04
    factor= 0
    PLs= replication(paths, T, R, factor, calculate_S_T)
    print('Standard Deviation of P&L = ', np.std(PLs))
    print('Mean value of P&L = ', np.mean(PLs))
    plt.figure(figsize=(7,5))
    plt.hist(PLs, bins=100)
    plt.axvline(x = np.mean(PLs), color = 'r')
    plt.show()
    print('-'*40)
    
    print('2.d')
    T = 1/365
    R= 0.04
    factor= 0
    PLs= replication(paths, T, R, factor, calculate_S_T)
    print('Standard Deviation of P&L = ', np.std(PLs))
    print('Mean value of P&L = ', np.mean(PLs))
    plt.figure(figsize=(7,5))
    plt.hist(PLs, bins=100)
    plt.axvline(x = np.mean(PLs), color = 'r')
    plt.show()
    print('-'*40)
    
    print('2.e')
    T = 1/365
    R= 0.08
    factor= 0
    PLs= replication(paths, T, R, factor, calculate_S_T)
    print('Standard Deviation of P&L = ', np.std(PLs))
    print('Mean value of P&L = ', np.mean(PLs))
    plt.figure(figsize=(7,5))
    plt.hist(PLs, bins=100)
    plt.axvline(x = np.mean(PLs), color = 'r')
    plt.show()
    print('-'*40)
    
    print('2.f')
    T = 1/365
    R= 0.08
    factor= 0.05
    PLs= replication(paths, T, R, factor, calculate_S_T)
    print('Standard Deviation of P&L = ', np.std(PLs))
    print('Mean value of P&L = ', np.mean(PLs))
    plt.figure(figsize=(7,5))
    plt.hist(PLs, bins=100)
    plt.axvline(x = np.mean(PLs), color = 'r')
    plt.show()
    print('-'*40)
    
###########################################################
### start main
if __name__ == "__main__":
    main()
