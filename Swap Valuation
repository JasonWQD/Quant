"""
Purpose:
    To price Interest Rate Swaps, and
    To delve deeper into Mean Reversion models.
"""
##################################################
###import
import pandas as pd 
import numpy as np
from numpy import *
import scipy.optimize as so
import matplotlib.pyplot as plt
from pylab import *
mpl.rcParams['font.sans-serif'] = ['SimHei']
from random import gauss
import pandas_datareader.data as web
##################################################
###get_data
def get_Data(nSwap):
    '''
    Purpose:
        Obtain DataFrame of Swap rates thanks to we need to constract zero rates curve
    Input: 
        nSwap       file name of Swap rate, including 3, 6 months Euribor rates and from 1 to 30 years Swap rates
    Return:
        Swap        DataFrame of Swap rate 

    '''    
    Swap= pd.read_excel(nSwap)
    Swap= Swap.drop(Swap.columns[0], axis=1)
    
    return Swap

##################################################
###zerorate
def zerorate(Swap):
    '''
    Purpose:
        Construct zero rates curve with bootstrapping method. We assume linear relationship for all 
        zero rates between time nodes. For example, we don't have zero rates for 15, 18, 21 and 2years. 
        If we assume zero rate of 2 years = r, then zero rate of 15 months = 1 year zero rate + 
        (r - 1 year zero rate) * (15 months - 1 year)/(2 years - 1 year)
    Input: 
        Swap        DataFrame of Swap Rates
    Return:
        Swap        DataFrame of Swap Rates, zero rates, discount factors for all quarter time spots
    '''
    
    #calculate 3-month and 6-month zero rates and discount factors from 3-month Euribor and 6-month Euribor
    Swap['DF'] = 1/(1+Swap['Swap Rate']*Swap['time'])
    Swap['zero rate'] = -np.log(Swap['DF'])/Swap['time']
    
    #Assuming linear relationship for all zero rates between time nodes
    loc = Swap['DF'][Swap['DF'].isnull().values==False].index.tolist() #all missed discount factors are in loc
    for i in range(len(loc)-1):
        if (loc[i+1] - loc[i]) != 1 :
            iN= loc[i] #beginning time
            iN1= loc[i+1]   #end time 
            
            def f(r):
                difference = r - Swap['zero rate'][iN]
                for j in range(iN+1, iN1+1):
                    fracT= (Swap['time'][j] - Swap['time'][iN]) / (Swap['time'][iN1] - Swap['time'][iN])
                    Swap['DF'][j] = np.exp(-(Swap['zero rate'][iN] + difference * fracT) * Swap['time'][j])  
                return 1 * (Swap['Swap Rate'][iN1]/4) * np.sum(Swap['DF'][:int(iN1+1)]) + 1 * Swap['DF'][iN1] - 1
            
            Swap['zero rate'][iN1] = so.fsolve(f,0.00) #use scipy.optimize.fsolve to solve the function f(r)
            difference = Swap['zero rate'][iN1] - Swap['zero rate'][iN]
            for j in range(iN+1, iN1+1):
                fracT= (Swap['time'][j] - Swap['time'][iN]) / (Swap['time'][iN1] - Swap['time'][iN])
                Swap['zero rate'][j] = Swap['zero rate'][iN] + difference * fracT
                Swap['DF'][j] = np.exp(-(Swap['zero rate'][iN] + difference * fracT) * Swap['time'][j])  
    plt.plot(Swap['time'], Swap['zero rate'])
    plt.xlabel('Years')
    plt.ylabel('Zero Rates')
    plt.title('Zero Rates Curve')
    plt.show()
    
    return Swap

##################################################
###forward_rate
def forward_rate(Swap, T, change):
    '''
    Purpose:
        Obtain all forward rates according to zero rates with bootstrapping method. In this function, we also adapt
        time nodes which are not a quarter time, for example 7 months or 5 months. In this case we need to calculate 
        new zero rates and bootstrap new forward rates.
    Input: 
        Swap           DataFrame of Swap Rates, zero rates and discount factors
        T              Time to maturity of the swap contract
        change         Current zero curve changes
    Return:
        zRate          Zero rates vector 
        fRate          Forward rates vector
    '''
    zRate = np.array(Swap['zero rate']) + change
    time = np.array(Swap['time'])
    iN = zRate.shape[0]
    fRate = np.zeros_like(zRate)
    fRate[0] = zRate[0]
    for i in range(1, iN):
        fRate[i] = (zRate[i] * time[i] - zRate[i-1] * time[i-1])/(time[i] - time[i-1])
    plt.plot(time, fRate, label= 'forward rates')
    plt.plot(time, zRate, label= 'zero rates')
    plt.xlabel('Years')
    plt.ylabel('Rates')
    plt.legend()
    plt.show()
    #Adapt to time nodes which are not a quarter time, for example 7 months.
    if T % 0.25 != 0:
        t1 = T % 0.25   
        iK = int(T//0.25+1)
        zR = np.zeros(iK)
        for i in range(iK):
            fracT = t1/0.25
            if i == 0:
                zR[i] = fracT * zRate[i]
            else:
                zR[i] = zRate[i-1] + fracT * (zRate[i] - zRate[i-1])
        time = np.zeros(iK)
        for i in range(iK):
            time[i] = t1 + 0.25 * i
        fRate = np.zeros_like(zR)
        fRate[0] = zR[0]
        for i in range(1, iK):
            fRate[i] = (zR[i] * time[i] - zR[i-1] * time[i-1])/(time[i] - time[i-1])
            zRate = zR
            
    return zRate, fRate

##################################################
###Principal
def Principal(T, repayment, OIS_spread, zRate):
    '''
    Purpose:
        Obtain principals vector. Here we use a fixed repayment to decline principal which in our case is 100.
        So for example if fixed repayment = 10, then after three months, which is the first money exchange date,
        principal = 90
    Input: 
        T               Time to maturity
        repayment       Fixed repayments starting after first exchange payment date
        OIS_spread      Continuously compounded OIS rate spread
        zRate           Zero rates vector
    Return:
        principal       Amortized, discounted by OIS rate already, principal vector
    '''  
    OIS = zRate - OIS_spread
    if T % 0.25 == 0:
        iK = int(T/0.25)
        time = np.zeros(iK)
        for i in range(iK):
            time[i] = 0.25 * (i+1)
    else:
        iK = int(T//0.25 + 1)
        t1 = T % 0.25
        time = np.zeros(iK)
        for i in range(iK):
            time[i] = t1 + 0.25 * i
            
    principal = np.zeros(iK)       
    for i in range(iK):
        principal[i] = (100 - i * repayment) * np.exp(-OIS[i] * time[i])
        
    return principal


##################################################
###value_swap
def value_swap(T, principal, fRate, swaprate, change):
    '''
    Purpose:
        Valuation of swap using FRA method
    Input: 
        T               Time to maturity
        principal       Amortized, discounted by OIS rate already, principal vector
        fRate           Forward rates vector
        swaprate        The fixed rate in swap contract which is already issued before
        change          Current zero curve changes
    Return:
        value_swap      Value of swap using FRA valuation method
    '''
    if T % 0.25 == 0:
        iK = int(T/0.25)
    else:
        iK = int(T//0.25 + 1)
    sRate = np.full(iK, swaprate/4) 
    difference = fRate[:iK]/4 - sRate
    swapvalue = difference @ principal.T
    print('Time to maturity =', round(T,1), 'zero curve change =', round(change,4), ', Value of the Swap = ', round(swapvalue, 4))
    
    return swapvalue

##################################################
###swap_pricing
def swap_pricing(T, zRate, fRate, principal, repayment):
    '''
    Purpose:
        Determine newly-issued swap rate
    Input: 
        T               Time to maturity
        zRate           Zero rates vector
        fRate           Forward rates vector
        principal       Principals vector which is declined over time with a fixed repayment
    Return:
        swaprate        Swap rate which makes value of the newly-issued swap = 0
    '''
    if T % 0.25 == 0:
        iK = int(T/0.25)
    else:
        iK = int(T//0.25 + 1)
        
    def f(r):
        swaprate = r
        sRate = np.full(iK, r/4)
        difference = fRate[:iK]/4 - np.full(iK, r/4)
        return difference @ principal.T
    swaprate = so.fsolve(f,0.00)[0]
    print('Time to maturity =', round(T,1), ', Repayment=', round(repayment,4), ', Newly-issued swap rate = ', round(swaprate, 6))
    
    return swaprate

###########################################################
### Return
def Return(index):
    '''
    Purpose:      
        Get the log return of each date, and the standard deviation of log returns
    Input:        
        index:          Name of S&P500 index csv file
    Output:       
        LReturn:        The DataFrame of Date and log returns
    '''
    df=pd.read_csv(index)
    df=df[:-1]
    df=df[18:]
    df['SP500']=[float(i) for i in df['SP500']]
    df.index = range(len(df))
    log_return=[]
    for i in range(1,len(df['DATE'])):
        log_return.append(np.log(df['SP500'][i]/df['SP500'][i-1]))
    LReturn=pd.DataFrame({'Date':df['DATE'][1:],'log_return':log_return})
    
    return LReturn

###########################################################
### Eta
def Eta(halflife):
    """
    Purpose: 
        According to half-life formula, we can obtain different eta values from different half life.
        In this case we can use a couple of weeks and months as "half life" to get different eta values.
        With different eta values, we can test how European call option value changes according to different eta.
        Formula : half life = ln(2)/η  --> η = ln(2)/half life
    Input: 
        Halflife:       Half life, i.e. how long the process needs to return to its mean level
    Output:
        eta :           Mean reversion level.
    """
    eta = np.log(2)/halflife
    
    return eta

def binomial_tree_call_option_pricing_model(steps, t, S, sigma, r):
    """
    Purpose: 
        In the mean reverting binomial tree model, the risk neutral probability of option value going up depends 
        on the np.log(current corresponded value of S&P500 index). So we do need to construct a complete binomial
        tree. 
    Input: 
        steps:          The amount of steps we want to have for binomial tree. 
        t:              We regard the whole 3 months as a time unit for convenience. So t = 1 here. 
        S:              Starting value of S&P500 index. We use 2021-08-31 as the starting point and 
                        value at this day equals to 4522.68.
        sigma:          Because we treat 3 months as a whole time unit, sigma here will represent 3-month 
                        standard deviation instead of one single month standard deviation.
        r:              3-month risk free rate here which is np.log(1+0.002) because one year risk free 
                        rate = 0.8% yearly compounded.
    Output:
        price_tree :    (steps+1 x steps+1) upper triangular matrix presenting binomial tree of S&P500 index value. 
                        The starting value is on the top left which is supposed to be 4522.68. 
    """
    dt=t/steps
    u=np.exp(sigma*np.sqrt(dt))
    d=1/u
    price_tree=np.zeros([steps+1,steps+1])
    for i in range(steps+1):
        for j in range(i+1):
            price_tree[j,i]=S*(d**j)*(u**(i-j))
    
    return price_tree
###########################################################
### binarytree_europcall
def binarytree_europcall(S,K,r,sigma,t,steps, eta, price_tree):
    """
    Purpose: 
        Value 3-month European call option with mean reverting binomial tree method.
    Input: 
        steps:      The amount of steps we want to have for binomial tree. 
        t:          We regard the whole 3 months as a time unit for convenience. So t = 1 here. 
        S:          Starting value of S&P500 index. We use 2021-08-31 as the starting point and 
                    value at this day equals to 4522.68.
        sigma:      Because we treat 3 months as a whole time unit, sigma here will represent 3-month 
                    standard deviation instead of one single month standard deviation.
        r:          3-month risk free rate here which is np.log(1+0.002) because one year risk free rate = 0.8% yearly compounded.
        K:          Exercise price of the option. K = 4500 here.
        eta:        Mean reversion level 
        price_tree: (steps+1 x steps+1) upper triangular matrix presenting binomial tree of S&P500 index value. 
                    The starting value is on the top left which is supposed to be 4522.68. 
    Output:
        c_values[0]: European call option value with 3 months time to maturity. 
    """
    u = np.exp(sigma*np.sqrt(t/steps))   
    d = 1/u   
    #P = (np.exp(r*t/steps)-d)/(u-d)
    prices = np.zeros(steps+1)      
    c_values = np.zeros(steps+1) 
    
    prices[0] = S*d**steps           
    c_values[0] = np.maximum(prices[0]-K,0)

    for i in range(1,steps+1):
        prices[i] = prices[i-1]*(u**2)   
        c_values[i] = np.maximum(prices[i]-K,0)  
        
    for j in range(steps,0,-1):       
        for i in range(0,j):
            current_price = np.log(price_tree[j-i-1, j-1])
            P = max(0, min(1, 0.5 + (eta * (np.log(S) - current_price) * np.sqrt(t/steps))/(2 * sigma)))
            c_values[i] = (P*c_values[i+1]+(1-P)*c_values[i])*np.exp(-r*t/steps)

    return c_values[0]

###########################################################
### calculate_S_T
def calculate_S_T(S, v, r, T, eta):
    """
    Purpose: 
        Calculate price of the underlying asset in 3 months. This process is mean reverting GBM.
    Input: 
        S:          Starting value of S&P500 index. We use 2021-08-31 as the starting point and 
                    value at this day equals to 4522.68.
        v:          Standard deviation of underlying asset for 1 year
        r:          1-year risk free rate here which is np.log(1+0.008) because one year risk free rate = 0.8% yearly compounded.
        T:          Time to maturity. Here it is 0.15 meaning 3 months
        eta:        Mean reversion level 
    Output:
        np.exp(X):  price of the underlying asset in 3 months
    """
    X= np.log(S)
    X= X * np.exp(-eta * T) + np.log(S)*(1-np.exp(-eta * T))+ v * np.sqrt((1-np.exp(-2 * eta * T))/(2*eta)) * gauss(0.0, 1.0)
    
    return np.exp(X)

###########################################################
### option_payoff
def option_payoff(flag, S_T, K):
    """
    Purpose: 
        Calculate payoff of the option. Payoff = np.exp(X) which is output of last function - K
    Input: 
        flag:       Determine to value call or put option
        S_T:        price of the underlying asset in 3 months
        K:          Exercise price
    Output:
        payoff
    """
    if flag == 'call':
        return max(S_T - K, 0.0)
    else:
        return max(K - S_T, 0.0)

###########################################################
### option_price
def option_price(flag, S, r, T, v, K, simulations):
    """
    Purpose: 
        Calculate price of the option under mean reverting GBM simulation method
    Input:
        flag:       Determine to value call or put option
        S:          Starting value of S&P500 index. We use 2021-08-31 as the starting point and 
                    value at this day equals to 4522.68.
        v:          Standard deviation of underlying asset for 1 year
        r:          1-year risk free rate here which is np.log(1+0.008) because one year risk free rate = 0.8% yearly compounded.
        T:          Time to maturity. Here it is 0.15 meaning 3 months
        K:          Exercise price
        simulations:The amount of times we do the mean reverting GBM process
    Output:
        price:      Price of the option
    """
    payoffs = []
    discout = exp(-r * T)
    for i in range(simulations):
        S_T = calculate_S_T(S, v, r, T, eta)
        payoffs.append(
            option_payoff(flag, S_T, K)
        )
    price = discout * sum(payoffs) / float(simulations)
    return price
##################################################
###main
def main():
    
    nSwap= 'Swap Rate.xlsx'
    Swap= get_Data(nSwap)
    Swap = zerorate(Swap)
    
    print('IRS Question 1')
    swaprate = 0.0
    for T in arange(1, 2.1, 0.1):
        change = 0.00
        zRate, fRate = forward_rate(Swap, T, change)
        OIS_spread = -0.00482
        repayment = 0
        principal = Principal(T, repayment, OIS_spread, zRate)
        swapvalue = value_swap(T, principal, fRate, swaprate, change)
    
    print('IRS Question 2')
    for T in arange(2, 11, 1):
        #T = 5
        change = 0.00
        zRate, fRate = forward_rate(Swap, T, change)
        OIS_spread = -0.00482
        for repayment in [1, 2, 3]:
            principal = Principal(T, repayment, OIS_spread, zRate)
            swaprate = swap_pricing(T, zRate, fRate, principal, repayment)
    
    print('IRS Question 3')
    swaprate = 0.005
    T = 10
    for change in np.arange(0, 0.11, 0.01):
        zRate, fRate = forward_rate(Swap, T, change)
        OIS_spread = -0.00482
        repayment = 0
        principal = Principal(T, repayment, OIS_spread, zRate)
        swapvalue = value_swap(T, principal, fRate, swaprate, change)
        
    print('MR Question(1) Binomial Tree')
    sigma = np.std(Return('SP500.csv')['log_return'])*np.sqrt(3)
    S = web.get_data_yahoo('^GSPC','2021-08-31').reset_index()['Close'][0]
    K = 4500
    r = np.log(1+0.002)
    t = 1
    steps = 1000
    halflifes = [1/12, 1/6, 1/3, 2/3, 1, 2, 4, 8, 12, 16, 20]
    vCall = np.zeros(len(halflifes))
    for i in range(len(halflifes)): 
        eta = Eta(halflifes[i])
        price_tree = binomial_tree_call_option_pricing_model(steps, t, S, sigma, r)
        vCall[i] = binarytree_europcall(S,K,r,sigma,t,steps, eta, price_tree)
    x = ['1W', '2W', '1M', '2M', '3M', '6M', '1Y', '2Y', '3Y', '4Y', '5Y']
    plt.plot(x, vCall)
    plt.axhline(y=137.5490, c= 'r')
    plt.xlabel('Half life')
    plt.ylabel('European call option value')
    plt.xticks(range(11), x)
    plt.show()
    
    print('MR Question(2) Monta Carlo Simulation')
    R = np.log(1+0.008)
    T = 0.25
    v = np.std(Return('SP500.csv')['log_return'])*np.sqrt(12)
    simulations = 1000000
    prices=np.zeros(len(halflifes))
    for i in range(len(halflifes)): 
        eta = Eta(halflifes[i])
        prices[i] = (option_price('call', S, R, T, v, K, simulations))
    print(prices)
    plt.plot(x, prices)
    plt.axhline(y=138.3970, c='r')
    plt.xlabel('Half life')
    plt.ylabel('European call option value')
    plt.xticks(range(11), x)
    plt.show()
    
    Maturities = [0.25, 0.5, 0.75, 1]
    pricesMR=np.zeros((len(halflifes), len(Maturities)))
    for j in range(len(Maturities)):
        for i in range(len(halflifes)): 
            eta = Eta(halflifes[i])
            pricesMR[i, j] = round(option_price('call', S, R, Maturities[j], v, K, simulations),4)
            print('Maturity=', Maturities[j], 'half life=', x[i], pricesMR[i, j])
    for j in range(len(Maturities)):
        plt.plot(x, pricesMR[:,j], label='Maturity='+ str(Maturities[j]))
    plt.xlabel('Half life')
    plt.ylabel('European call option value')
    plt.xticks(range(11), x)
    plt.legend()
    plt.figure(figsize=(15,10))
    plt.show()
    
if __name__=="__main__":
    main()
    
